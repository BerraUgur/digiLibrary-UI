import { useState } from "react";
import { useNavigate } from "react-router-dom";
import Button from "../UI/Button";
import { useAuth } from "../../context/AuthContext";
import { loanService } from "../../services/api";
import { toast } from "react-toastify";
import "./BookItem.css";

function BookItem({ book, onDeleteBook }) {
  const { user } = useAuth();
  const navigate = useNavigate();
  const [loading, setLoading] = useState(false);

  // Kitap √∂d√ºn√ß alma
  const handleBorrowBook = async () => {
    if (!user) {
      toast.error('Kitap √∂d√ºn√ß almak i√ßin giri≈ü yapmalƒ±sƒ±nƒ±z');
      navigate('/login');
      return;
    }

    // 14 g√ºn sonrasƒ± otomatik dueDate
    const dueDate = new Date(Date.now() + 14 * 24 * 60 * 60 * 1000).toISOString().slice(0, 10);

    try {
      setLoading(true);
      console.log('Borrowing book:', { bookId: book._id, dueDate });
      await loanService.borrowBook({ bookId: book._id, dueDate });
      toast.success('Kitap ba≈üarƒ±yla √∂d√ºn√ß alƒ±ndƒ±! √ñd√ºn√ß aldƒ±ƒüƒ±m kitaplar sayfasƒ±na y√∂nlendiriliyorsunuz...');
      // LOGOUT YAPMASIN Dƒ∞YE window.location.reload() KULLANMIYORUZ!
      // Navigate ile y√∂nlendir - bu logout yapmaz
      setTimeout(() => {
        navigate('/my-loans', { replace: true });
      }, 1500);
    } catch (error) {
      console.error('Borrow error:', error);
      setLoading(false);
      
      // √ñdenmemi≈ü bor√ß kontrol√º
      if (error.message && error.message.includes('√ñdenmemi≈ü')) {
        toast.error(error.message, { 
          autoClose: 6000, 
          style: { fontSize: '15px', fontWeight: '600' }
        });
      }
      // 1 kitap limiti kontrol√º
      else if (error.message && error.message.includes('Aynƒ± anda sadece 1 kitap')) {
        toast.warning('üìö Yeni kitap almak i√ßin mevcut √∂d√ºn√ß aldƒ±ƒüƒ±nƒ±z kitabƒ± iade ediniz!', {
          autoClose: 5000,
          style: { fontSize: '15px' }
        });
      }
      // Ban mesajƒ± kontrol√º
      else if (error.message && error.message.includes('yasaklƒ±')) {
        toast.error(error.message, { autoClose: 8000, style: { fontSize: '16px' } });
      } else if (error.message && error.message.includes('fetch')) {
        toast.error('Sunucuya baƒülanƒ±lamadƒ±. L√ºtfen backend sunucusunun √ßalƒ±≈ütƒ±ƒüƒ±ndan emin olun.');
      } else if (error.message && error.message.includes('CORS')) {
        toast.error('CORS hatasƒ±. Backend sunucusunu yeniden ba≈ülatƒ±n.');
      } else {
        toast.error(error.message || 'Kitap √∂d√ºn√ß alƒ±nƒ±rken bir hata olu≈ütu');
      }
    }
  };

  // Kitap detayƒ±na git
  const handleViewDetails = () => {
    navigate(`/books/${book._id}`);
  };

  // Kitap silme (sadece admin)
  const handleDeleteBook = async () => {
    console.log('User role:', user?.role);
    console.log('User data:', user);
    
    if (user?.role === 'admin') {
      try {
        await onDeleteBook(book._id);
      } catch (error) {
        console.error('Delete book error:', error);
        toast.error('Kitap silinirken bir hata olu≈ütu');
      }
    } else {
      toast.error('Bu kitabƒ± silme yetkiniz yok');
    }
  };

  return (
    <div className="book-item">
      <div className="book-image">
        <img 
          src={book.imageUrl || '/book-placeholder.jpg'} 
          alt={book.title}
          onError={(e) => {
            e.target.src = '/book-placeholder.jpg';
          }}
        />
      </div>
      
      <div className="book-info">
        <span className="book-category">{book.category}</span>
        <b className="book-title line-clamp-1">{book.title}</b>
        <span className="book-author">Yazar: {book.author}</span>
        <span className="book-status">
          Durum: {book.available ? 'Mevcut' : '√ñd√ºn√ß Alƒ±nmƒ±≈ü'}
        </span>
        <div className="book-meta mt-2 flex items-center gap-3 text-sm text-gray-600">
          {typeof book.avgRating === 'number' && (
            <span title="Ortalama Puan">‚≠ê {book.avgRating}</span>
          )}
          <span title="Yorum Sayƒ±sƒ±">üí¨ {book.reviewCount || 0}</span>
        </div>
        
        <div className="book-actions">
          <Button
            color="primary"
            size="sm"
            onClick={handleViewDetails}
          >
            Detaylarƒ± G√∂r
          </Button>
          
          {user?.role === 'admin' ? (
            <>
              <Button
                color="warning"
                size="sm"
                onClick={() => navigate(`/books/${book._id}/edit`)}
              >
                D√ºzenle
              </Button>
              <Button
                color="danger"
                size="sm"
                onClick={handleDeleteBook}
              >
                Sil
              </Button>
            </>
          ) : book.available && (
            <Button
              color="success"
              size="sm"
              onClick={handleBorrowBook}
              disabled={loading}
            >
              {loading ? 'ƒ∞≈üleniyor...' : '√ñd√ºn√ß Al'}
            </Button>
          )}
        </div>
      </div>
    </div>
  );
}

export default BookItem;